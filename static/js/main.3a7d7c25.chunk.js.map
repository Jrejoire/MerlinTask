{"version":3,"sources":["components/Form.js","components/Login.js","containers/App.js","serviceWorker.js","index.js"],"names":["Form","withStyles","theme","input","height","props","classes","Grid","container","spacing","direction","alignItems","justify","FormControl","className","TextField","id","label","defaultValue","margin","variant","InputProps","InputLabelProps","shrink","type","autoComplete","value","href","width","alt","src","Login","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAoFeA,G,MAzEFC,aANE,SAAAC,GAAK,MAAK,CACrBC,MAAO,CACHC,OAAQ,OAIHH,EAAmB,SAAAI,GAAU,IAC9BC,EAAYD,EAAZC,QACR,OACI,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,QAAS,EACTC,UAAU,SACVC,WAAW,SACXC,QAAQ,UAER,kBAACC,EAAA,EAAD,CAAaC,UAAU,QACnB,wCAEA,kBAACC,EAAA,EAAD,CACID,UAAU,aACVE,GAAG,YACHC,MAAM,YACNC,aAAa,IACbC,OAAO,SACPC,QAAQ,WACRC,WAAY,CACRP,UAAWR,EAAQH,OAEvBmB,gBAAiB,CACbC,QAAQ,KAGhB,kBAACR,EAAA,EAAD,CACID,UAAU,aACVE,GAAG,QACHQ,KAAK,OACLP,MAAM,SACNC,aAAa,IACbC,OAAO,SACPC,QAAQ,WACRC,WAAY,CACRP,UAAWR,EAAQH,OAEvBmB,gBAAiB,CACbC,QAAQ,KAGhB,kBAACR,EAAA,EAAD,CACID,UAAU,aACVE,GAAG,WACHC,MAAM,WACNC,aAAa,IACbO,aAAa,mBACbN,OAAO,SACPC,QAAQ,WACRC,WAAY,CACRP,UAAWR,EAAQH,OAEvBmB,gBAAiB,CACbC,QAAQ,KAGhB,yBAAKT,UAAU,oBACX,4BAAQA,UAAU,kBAAkBU,KAAK,SAASE,MAAM,UAAxD,cAKR,uBAAGZ,UAAU,kBAAkBa,KAAK,iBAChC,yBAAKC,MAAM,OAAOC,IAAI,cAAcf,UAAU,cAC9CgB,IAAI,wHACJ,uBAAGhB,UAAU,iBAAb,+BCvDDiB,MAlBf,WACE,OACE,yBAAKjB,UAAU,SACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,SAAd,iCACA,gEACA,0DAA+B,uBAAGa,KAAK,UAAR,SAA/B,OAGJ,yBAAKb,UAAU,cACb,yBAAKgB,IAAI,cAAcD,IAAI,OAAOf,UAAU,SAC5C,kBAAC,EAAD,CAAMA,UAAU,Y,MCJTkB,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCKcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3a7d7c25.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormControl, Grid, TextField } from '@material-ui/core';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport './Form.css';\r\n\r\nconst styles = theme => ({\r\n    input: {\r\n        height: 30\r\n    }\r\n});\r\n\r\nconst Form = withStyles(styles)(props => {\r\n    const { classes } = props;\r\n    return (\r\n        <Grid \r\n            container\r\n            spacing={0}\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justify=\"center\"\r\n        >\r\n            <FormControl className=\"main\">\r\n                <h2>Register</h2>\r\n\r\n                <TextField\r\n                    className=\"text-field\"\r\n                    id=\"full-name\"\r\n                    label=\"Full Name\"\r\n                    defaultValue=\" \"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    InputProps={{\r\n                        className: classes.input\r\n                    }}\r\n                    InputLabelProps={{\r\n                        shrink: true\r\n                    }}\r\n                />\r\n                <TextField\r\n                    className=\"text-field\"\r\n                    id=\"email\"\r\n                    type=\"mail\"\r\n                    label=\"E-mail\"\r\n                    defaultValue=\" \"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    InputProps={{\r\n                        className: classes.input\r\n                    }}\r\n                    InputLabelProps={{\r\n                        shrink: true\r\n                    }}\r\n                />\r\n                <TextField\r\n                    className=\"text-field\"\r\n                    id=\"password\"\r\n                    label=\"Password\"\r\n                    defaultValue=\" \"\r\n                    autoComplete=\"current-password\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    InputProps={{\r\n                        className: classes.input\r\n                    }}\r\n                    InputLabelProps={{\r\n                        shrink: true\r\n                    }}\r\n                />\r\n                <div className=\"button-container\">\r\n                    <button className=\"register-button\" type=\"submit\" value=\"submit\">\r\n                        register\r\n                    </button>\r\n                </div>\r\n            </FormControl>\r\n            <a className=\"oauth-container\" href=\"/google-oauth\">\r\n                <img width=\"15px\" alt=\"google-logo\" className=\"google-logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/512px-Google_%22G%22_Logo.svg.png\" />\r\n                <p className=\"google-signin\"> Sign in with Google </p>\r\n            </a>\r\n\r\n        </Grid>\r\n    );\r\n});\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Login.css';\r\nimport Form from './Form';\r\n\r\nfunction Login() {\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"left-side\">\r\n        <div className='left-container'>\r\n          <h1 className=\"title\">Redefining mobile advertising</h1>\r\n          <p>Please use this form to register.</p>\r\n          <p>If you are a member, please <a href='/login'>login</a>.</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"right-side\">\r\n        <img src=\"/asset3.png\" alt=\"logo\" className=\"logo\" />\r\n        <Form className=\"form\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport Login from '../components/Login'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Login />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}